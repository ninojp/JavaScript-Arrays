// Exerc√≠cio proposto
jantarDeHoje = ['üçî', 'üå≠', 'üçï']
jantarDeHoje.pop()
jantarDeHoje.pop()
jantarDeHoje.push('üç≥')
jantarDeHoje.push('ü•ó')
jantarDeHoje.push('üçè')
console.log(jantarDeHoje);
console.log("\n");
//========================================================================================================================================

// PRATICANDO O SLICE()
const alunos = ['Jo√£o', 'Juliana', 'Ana', 'Caio', 'Lara', 'Marjorie', 'Guilherme', 'Aline', 'Fabiana', 'Andre', 'Carlos', 'Paulo', 'Bia', 'Vivian', 'Isabela', 'Vin√≠cius', 'Renan', 'Renata', 'Daisy', 'Camilo'];
// console.log(alunos);
// Usado o SLICE() para dividir o array, indicando o INDICE onde come√ßa e o ultimo(que n√£o ser√° colocado)
const sala1 = alunos.slice(0,10);
// Agora indicamos apenas o INDICE onde come√ßa(que ser√° colocado), e automaticamente o SLICE() ira adicionar TODO o restante do array 
const sala2 = alunos.slice(10);
console.log(sala1);
console.log(sala2);
console.log("");
// Outra forma de usar o slice() √© automatizando a contagem de INDICEs atrav√©z do length
const sala3 = alunos.slice(0,alunos.length/2);
const sala4 = alunos.slice(alunos.length/2);
console.log(sala3);
console.log(sala4);
console.log("");

// TRABALHANDO COM O M√âTODO SPLICE(): variavel.splice(indice, quantidade, subtituicao);
const nomes = ["Jo√£o", "Ana", "Caio", "Lara", "Marjorie", "Leo"];
console.log(nomes);
nomes.splice(1, 2, "Rodrigo");
console.log(nomes);
// Pode ser usado apenas para remover, sem indicar o valor de substitui√ß√£o  
nomes.splice(2, 2);
console.log(nomes);
console.log("");
// Exec√≠cio proposto
animaisDoAquario = ['üêã', 'üêô', 'üê¨', 'ü¶à']
console.log(animaisDoAquario)
animaisDoAquario.splice(1,0,'üê†') //a partir do indice 1, n√£o removeu nada(0), adicionou o peixe
console.log(animaisDoAquario)
animaisDoAquario.splice(3,2,'üêü') //a partir do indice 3, removeu 2, adicionou o outro peixe
console.log(animaisDoAquario)
console.log("\n");
//============================================================================================================================================

// TRABALHANDO COM O M√âTODO CONCAT(): Junta dois array FORMANDO um terceiro com todos os valores, na ORDEM que foram colocados
console.log("PRATICANDO O array.concat()");
const salaJS = ["Evaldo", "Camis", "Mari"];
console.log(salaJS)
const salaPython = ["Ju", "Leo", "Raquel"];
console.log(salaPython)
const salasUnificadas = salaJS.concat(salaPython);
console.log(salasUnificadas);
console.log("");

// PRATICANDO O array.concat() com outro tipos de dados
const arrayOriginal = ["Maria", "Carlos", "Eduardo", "Samanta"]
const arrayConcat = arrayOriginal.concat("Andr√©", "Fernanda")
console.log(arrayOriginal)
console.log(arrayConcat)
console.log("");

const arrayOriginal1 = ["Maria", "Carlos", "Eduardo", "Samanta"]
const arrayConcat1 = arrayOriginal1.concat(["Andr√©", "Fernanda"], ["Ricardo", "Ana"], ["Marcelo", "Bia"])
console.log(arrayOriginal1)
console.log(arrayConcat1)
console.log("");

const arrayOriginal2 = [50, 60, 70]
const arrayConcat2 = arrayOriginal2.concat([80, [90, 100]]) // aqui h√† um animhamento, um array dentro de outro array(matrix)
console.log(arrayConcat2)
console.log(arrayOriginal2)
console.log("");
//============================================================================================================================================

// PRATICANDO o array.reduce()
// O m√©todo reduce() est√° trabalhando com dois par√¢metros. O primeiro √© a fun√ß√£o callback obrigat√≥ria para retornar o c√°lculo
//e o segundo par√¢metro √© um n√∫mero que representa o valor inicial do acumulador ‚Äì no caso, 0.
// A fun√ß√£o callback foi escrita diretamente dentro do reduce(), e esta fun√ß√£o tamb√©m est√° recebendo dois par√¢metros, 
//ambos obrigat√≥rios: o valor acumulado e o valor atual.
// A fun√ß√£o callback foi escrita na forma de arrow function; nesse caso, quando s√≥ temos uma linha de instru√ß√£o
//dentro da fun√ß√£o (atual + acc) n√£o precisamos usar chaves e nem da palavra-chave return.
// Caso voc√™ tenha mais de uma linha de instru√ß√£o dentro de uma arrow function, as chaves {} e a palavra-chave return voltam a ser necess√°rios.
console.log("PRATICANDO o array.reduce()");
const numeros = [43, 50, 65, 12]
const soma = numeros.reduce((acc, atual) => atual + acc, 0)
console.log(soma) //170
console.log("");
//============================================================================================================================================

// Desafio 17: criando c√≥pias - OPERADOR(...), operador de espalhamento
//Crie um novo array com a nota 10 a mais, sem alterar o array original.
console.log("OPERADOR(...), operador de espalhamento");
const notasA = [7, 7, 8, 9];
const notasConcat = notasA.concat(10); //(exemplo q eu criei)
console.log(`CONCAT(): As novas notas s√£o ${notasConcat}`); //Assim acho EU q resolveria
console.log(`As notas originais s√£o ${notasA}`);
console.log("");
// const notasPush = notasA.push(10) //ERRO, pois o push ALTERA O ARRAY ATUAL //Exibe 5 (eu q criei esta kaka)
// console.log(notasPush)

const notasPush1 = notasA //ERRO, aqui agora a uma ATRIBUI√á√ÉO INVERSA e notasPush1 recebe o valor de notasA MAS notasA tab√©m passa a receber o valor de notasPush1
// Ent√£o, qualquer altera√ß√£o que fizermos em notasPush1 ser√° feita no array original e vice-versa. √â como se, para o JavaScript, eles fossem o mesmo array. E n√£o √© isso que queremos.
notasPush1.push(10)
console.log(`As novas notas s√£o ${notasPush1}`);
console.log(`As notas originais s√£o ${notasA}`); // sendo assim AGORA notasA √© = a notasPush1
console.log("");

// FORMA CORRETA
const notas = [7, 7, 8, 9];
const novasNotas = [...notas]; //Esse √© um operador(...) do JavaScript que se chama spread operator, ou "operador de espalhamento". 
// Ao utiliz√°-lo junto com uma lista, ele pega todo o conte√∫do desse array e espalhar seus valores no local que estamos indicando.
novasNotas.push(10)
console.log(`As novas notas s√£o ${novasNotas}`);
console.log(`As notas originais s√£o ${notas}`);
console.log("");
// Tamb√©m podemos usar essa sintaxe do operador de espalhamento no par√¢metro de uma fun√ß√£o, por exemplo, 
//ele vai pegar o conte√∫do de uma array e colocar separado por v√≠rgulas onde queremos.
const novasNotas2 = [30, ...notas, 20];
//Ent√£o, o spread operator √© um operador que podemos usar para clonar arrays sem ter problemas de refer√™ncias do JavaScript.
console.log(`As novas notas s√£o ${novasNotas2}`);
console.log(`As notas originais s√£o ${notas}`);
console.log("");
//============================================================================================================================================


// Atribuir diretamente um array para outro com o sinal = faz com o que o JavaScript entenda que √© como se eles fossem o mesmo array. 
// Para evitar esse comportamento, devemos criar um array totalmente novo, com a ajuda do spread operator ... (ou operador de espalhamento).
// Por√©m, esse comportamento n√£o acontece com strings, n√∫meros e booleanos, que s√£o tipos primitivos do JavaScript.
console.log("OPERADOR(...), ");
let num1 = 10;
console.log(num1)
let num2 = num1;
console.log(num2)
num2 += 5;
console.log(num2)
num1 += 1;
console.log(num1)
console.log(`Num1 √© ${num1}. Num2 √© ${num2}`);
console.log("");
// Ao executar o c√≥digo, teremos a frase ‚ÄúNum1 √© 11. Num2 √© 15‚Äù. Ou seja, com o c√≥digo let num2 = num1, o JavaScript entende que queremos criar uma c√≥pia de num1, 
//e cria uma nova vari√°vel, com seu pr√≥prio espa√ßo na mem√≥ria guardando seu valor. Ent√£o, ao modificar uma das vari√°veis, a outra n√£o √© alterada.
// Esse comportamento de copiar um valor primitivo, o atribuindo a uma nova vari√°vel, √© chamado de atribui√ß√£o por valor e acontece somente com os tipos primitivos do JavaScript.

// O mesmo comportamento ocorre quando trabalhamos com par√¢metros de fun√ß√µes. Veja o seguinte exemplo:
let numeroOriginal = 10;
function alteraNumero(numero) {
  numero = 50;
  console.log(`numero do par√¢metro √© ${numero}. numeroOriginal √© ${numeroOriginal}`);
}
alteraNumero(numeroOriginal);
console.log("");
// Executando o c√≥digo, teremos a frase ‚Äúnumero do par√¢metro √© 50. numeroOriginal √© 10‚Äù. Ao chamar a fun√ß√£o passando numeroOriginal como par√¢metro, 
// foi feita uma c√≥pia de seu valor para ser utilizada como o par√¢metro numero dentro da fun√ß√£o. Dessa forma, mesmo alterando numero dentro da fun√ß√£o, numeroOriginal permanece inalterado.
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// Mas como voc√™ viu, com arrays n√£o funciona bem dessa forma, afinal, eles n√£o s√£o um tipo primitivo. Considere o exemplo utilizado no v√≠deo passado:
// Como estamos lidando com dados mais complexos, o JavaScript faz isso por padr√£o para otimizar mem√≥ria e performance, em vez de realizar uma c√≥pia do array em toda nova atribui√ß√£o.
// Uma atribui√ß√£o de um array √© chamada de atribui√ß√£o por refer√™ncia, pois nela √© passada a refer√™ncia do array em si, e n√£o uma c√≥pia de seu valor.
const notas5 = [7, 7, 8, 9];
const novasNotas5 = notas5;
novasNotas.push(10);
console.log(`As novas notas s√£o ${novasNotas5}`);
console.log(`As notas originais s√£o ${notas5}`);
console.log("");

// O mesmo comportamento ocorre quando trabalhamos com par√¢metros de fun√ß√µes. Veja o c√≥digo abaixo:
const arrayOriginal3 = [7, 7, 8, 9];
function alteraArray(array) {
  array.push(10);
  console.log(`array do par√¢metro √© ${array}`);
  console.log(`arrayOriginal √© ${arrayOriginal3}`);
}
alteraArray(arrayOriginal3);
// Ap√≥s passar arrayOriginal como par√¢metro de alteraArray, o utilizamos como o par√¢metro array. O c√≥digo array.push(10) alterou ambos os arrays,
// assim como o que houve no exemplo que fizemos a atribui√ß√£o. Ou seja, novamente, foi passada a refer√™ncia do array em si, e n√£o uma c√≥pia dele.
// De forma an√°loga √† solu√ß√£o do v√≠deo, caso queiramos passar uma c√≥pia do array e n√£o sua refer√™ncia, trocamos o c√≥digo alteraArray(arrayOriginal)
// por alteraArray([...arrayOriginal]). Assim, a sa√≠da ser√°:

